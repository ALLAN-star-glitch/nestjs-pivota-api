generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  phone     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isPremium Boolean   @default(false)
  plan      Plan      @default(free)

  // Relationships
  roles     UserRole[] // Many-to-Many User <-> Roles
  houseAds  HouseAd[]  @relation("UserHouseAds")
  refreshTokens RefreshToken[] // One-to-Many User <-> Refresh Tokens
}

model Role {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  users       UserRole[]      // Many-to-Many Role <-> Users
  permissions RolePermission[] // Many-to-Many Role <-> Permissions
}

model Permission {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  roles       RolePermission[] // Many-to-Many Permission <-> Roles
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId]) // Composite key to ensure uniqueness
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId]) // Composite key to ensure uniqueness
}

model HouseAd {
  id                    String   @id @default(cuid()) 
  title                 String
  description           String
  location             String?
  price                 Float
  houseType            String
  numberOfBedrooms     Int?
  numberOfBathrooms    Int?
  houseRentalCapacity  String
  isFurnished          Boolean?
  houseCondition       String?
  images               String[]
  postedBy    User     @relation(fields: [userId], references: [id], name: "UserHouseAds")
  userId               String
  isAvailable          Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt]) // Add an index to optimize querying by userId and expiration date
}

enum Plan {
  free
  bronze
  silver
  gold
}
