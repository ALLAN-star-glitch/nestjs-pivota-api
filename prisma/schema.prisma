// ========== PRISMA CLIENT & DATABASE CONFIGURATION ==========

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ========== ENUMS FOR CONTROLLED VALUES ==========
//

enum HouseType {
  ROOM
  APARTMENT
  SHARED
}

enum RentalCapacity {
  SINGLE_TENANT
  FAMILY
}

enum HouseCondition {
  NEW
  USED
  NEEDS_REPAIRS
}

//
// ========== USER & AUTHENTICATION ==========
//

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  firstName   String
  lastName    String
  phone       String     @unique
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPremium   Boolean    @default(false)

  // Each user MAY belong to one plan (Many-to-One, optional)
  planId      String?    // optional, e.g. admins may not have a plan
  plan        Plan?      @relation(fields: [planId], references: [id], onDelete: Restrict)

  // User can have multiple roles (Many-to-Many)
  roles         UserRole[]

  // User can post multiple house listings (One-to-Many)
  houseAds      HouseAd[] @relation("UserHouseAds")

  // User can have multiple active refresh tokens (One-to-Many)
  refreshTokens RefreshToken[]

  // User can register for multiple categories (Many-to-Many)
  categories    UserCategory[]
}

//
// ========== ROLES & PERMISSIONS ==========
//

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?

  // Role can be assigned to many users (Many-to-Many)
  users       UserRole[]

  // Role can have many permissions (Many-to-Many)
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?

  // Permission can be assigned to many roles (Many-to-Many)
  roles       RolePermission[]
}

// Join table: connects Users ↔ Roles (Many-to-Many)
model UserRole {
  userId String
  roleId String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

// Join table: connects Roles ↔ Permissions (Many-to-Many)
model RolePermission {
  roleId       String
  permissionId String

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

//
// ========== SERVICE PROVIDER CATEGORIES ==========
//

model Category {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  description     String?

  // Each category can have different rules for each plan (One-to-Many)
  rules           CategoryRule[]

  // Category can be assigned to many users (Many-to-Many)
  userCategories  UserCategory[]
}

// Defines how a specific plan behaves in a category (Many-to-One from both Plan and Category)
model CategoryRule {
  id              String   @id @default(cuid())
  categoryId      String
  planId          String
  maxListings     Int
  visibilityBoost Boolean  @default(false)

  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  plan            Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
}

// Join table: connects Users ↔ Categories (Many-to-Many)
model UserCategory {
  userId     String
  categoryId String

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId])
}

//
// ========== HOUSE LISTINGS ==========
//

model HouseAd {
  id                   String         @id @default(cuid())
  title                String
  slug                 String         @unique
  description          String
  location             String?
  price                Float
  houseType            HouseType
  numberOfBedrooms     Int?
  numberOfBathrooms    Int?
  houseRentalCapacity  RentalCapacity
  isFurnished          Boolean?
  houseCondition       HouseCondition?
  images               String[]
  isAvailable          Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  createdBy            String?
  updatedBy            String?

  // Each house ad is posted by one user (Many-to-One)
  userId               String
  postedBy             User           @relation(fields: [userId], references: [id], name: "UserHouseAds")
}

//
// ========== SESSION MANAGEMENT ==========
//

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  device      String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  lastUsedAt  DateTime?
  revoked     Boolean  @default(false)

  // Token belongs to one user (Many-to-One)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
}

//
// ========== PLANS & FEATURES ==========
//

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  slug          String         @unique
  price         Float          @default(0)
  description   String?
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // One plan can be assigned to many users (One-to-Many)
  users         User[]

  // One plan can define multiple category rules (One-to-Many)
  rules         CategoryRule[]

  // One plan can have multiple granular feature flags (One-to-Many)
  planFeatures  PlanFeature[]
}

// Defines detailed feature flags for a plan (Many-to-One)
model PlanFeature {
  id      String @id @default(cuid())
  planId  String
  key     String
  value   String?

  plan    Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
}
