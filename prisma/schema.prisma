//This tells Prisma to generate a TypeScript/JavaScript client that lets you query the database in your app.
generator client {
  provider = "prisma-client-js"
}


//This connects Prisma to a PostgreSQL database using a URL from your environment variables.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  phone     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isPremium Boolean   @default(false)
  plan      Plan      @default(free)

  // Relationships
  roles     UserRole[] 
  houseAds  HouseAd[]  @relation("UserHouseAds") 

 refreshTokens  RefreshToken[] // ✅ One-to-Many relation (A user can have multiple refresh tokens)
}

model Role {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  users       UserRole[]      // Many-to-Many Role <-> Users
  permissions RolePermission[] // Many-to-Many Role <-> Permissions
}


//Permission is Related to Role through RolePermission.
model Permission {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  roles       RolePermission[] // Many-to-Many Permission <-> Roles
}


//Join table between User and Role
//Composite primary key ensures one user can’t have the same role twice.
model UserRole {
  userId String //foreign key referencing User
  roleId String //foreign key referencing Role
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId]) // Composite key to ensure uniqueness (i.e., each user can only have a role only once)
}


//Join table between Role and Permission
model RolePermission { //similar to UserRole
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId]) // Composite key to ensure uniqueness
}

model HouseAd {
  id                    String   @id @default(cuid()) 
  title                 String
  description           String
  location             String?
  price                 Float
  houseType            String
  numberOfBedrooms     Int?
  numberOfBathrooms    Int?
  houseRentalCapacity  String
  isFurnished          Boolean?
  houseCondition       String?
  images               String[]
  postedBy    User     @relation(fields: [userId], references: [id], name: "UserHouseAds") //many to one relationship linking a house ad to the user who posted it
  userId               String //foreign key referencing the user
  isAvailable          Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model RefreshToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String   // Do NOT add `@unique` here
  device     String
  ipAddress  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  lastUsedAt  DateTime? //optional ... e.g., to show when the user was last logged in 
  userAgent   String? //option ... to track device, browser, device type etc.... 

  revoked    Boolean  @default(false) // for soft delete

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ One-to-Many

  @@index([userId, expiresAt]) // ✅ Index for performance
}



enum Plan {
  free
  bronze
  silver
  gold
}
